import telebot
import api
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.util import async_dec

TELEGRAM_TOKEN = ''
bot = telebot.TeleBot(TELEGRAM_TOKEN)
token_access = ['8kEDz89Km7',
                'n6MH58Hh7h',
                'JyxJ3jG373',
                'vn3zL3D8E3',
                'G8d4zPN5r5',
                'X75a5Lx3nA',
                'g22Pb4MB7b',
                '2tX4UhvC58',
                '64igZJ2C7e',
                'yCULd498n5',
                '4JypbN896M',
                'T8Mfk57Lj6',
                'E7Fj465hyY',
                '95yKsu62ZX',
                'h67r2gAUE5',
                'm8e82M7YRi',
                '55KgVf58Tv',
                'pGM2b9Z5d9',
                'GkiE463iX3',
                'k9NJ26hvK8']


@bot.message_handler(commands=['start'])
def start_message(message):
    telegram_id = message.chat.id
    if api.check_user(message):
        bot.send_message(telegram_id, '–í—ñ—Ç–∞—é, –≤–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —É —Å–∏—Å—Ç–µ–º—ñ ‚úÖ')
    else:
        api.create_user(telegram_id)
        bot.send_message(telegram_id, '–í–∞—Å –≤—ñ—Ç–∞—î –±–æ—Ç e-—Ä–æ–∑–∫–ª–∞–¥—É –í—ñ–π—Å—å–∫–æ–≤–æ–≥–æ —ñ–Ω—Å—Ç–∏—Ç—É—Ç—É —Ç–µ–ª–µ–∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ–π —Ç–∞ '
                                      '—ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∑–∞—Ü—ñ—ó —ñ–º–µ–Ω—ñ –ì–µ—Ä–æ—ó–≤ –ö—Ä—É—Ç '
                                      '–¶–µ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –¥–ª—è –∑—Ä—É—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É —É –í–∞—à–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñüì≤')
        bot.send_message(telegram_id, '–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó üîê : ')


@bot.message_handler(commands=['restart'])
def info_message(message):
    chat_id = message.chat.id
    user = api.get_user(chat_id)
    if not user['userStatus']:
        bot.send_message(chat_id, '–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó üîê : ')
    else:
        filter_group(chat_id, True)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        chat_id = call.message.chat.id
        split_array = str(call.data).split(':')
        key = split_array[0]
        value = split_array[1]

        if key == "group":
            reply_markup = call.message.reply_markup
            inline_keyboard = reply_markup.keyboard
            if value == 'save' or value == 'continue':
                selected_groups = filter_multi_select_return_array(inline_keyboard)
                if value == 'continue':
                    selected_groups = api.get_groups()
                api.update_field_for_user(chat_id, selected_groups, 'groups')
                filter_departments(chat_id, call.message.id, True)
            else:
                bot.edit_message_reply_markup(chat_id, call.message.id,
                                              reply_markup=filter_multi_select(reply_markup, value))
        elif key == "dep":
            reply_markup = call.message.reply_markup
            inline_keyboard = reply_markup.keyboard
            if value == 'save' or value == 'continue':
                selected_dep = filter_multi_select_return_array(inline_keyboard)
                if value == 'continue':
                    selected_dep = []
                    for k, v in api.get_departments().items():
                        selected_dep.append(v)
                api.update_field_for_user(chat_id, selected_dep, 'departments')
                filter_numbers_lessons(chat_id, call.message.id, True)
            else:
                bot.edit_message_reply_markup(chat_id, call.message.id,
                                              reply_markup=filter_multi_select(reply_markup, value))
        elif key == "number":
            reply_markup = call.message.reply_markup
            inline_keyboard = reply_markup.keyboard
            if value == 'save' or value == 'continue':
                selected_num = filter_multi_select_return_array(inline_keyboard)
                if value == 'continue':
                    selected_num = ["1", "2", "3", "4"]
                api.update_field_for_user(chat_id, selected_num, 'numberLessons')
                filter_types(chat_id, call.message.id, True)
            else:
                bot.edit_message_reply_markup(chat_id, call.message.id,
                                              reply_markup=filter_multi_select(reply_markup, value))
        elif key == "type":
            reply_markup = call.message.reply_markup
            inline_keyboard = reply_markup.keyboard
            if value == 'save' or value == 'continue':
                selected_types = filter_multi_select_return_array(inline_keyboard)
                if value == 'continue':
                    selected_types = []
                    for item in api.get_types():
                        selected_types.append(item['_id'])
                api.update_field_for_user(chat_id, selected_types, 'types')
                search(chat_id, call.message.id)
            else:
                bot.edit_message_reply_markup(chat_id, call.message.id,
                                              reply_markup=filter_multi_select(reply_markup, value))


@async_dec()
def filter_group(id_telegram, message_id, edit_flag=False):
    inline_keyboard = InlineKeyboardMarkup()
    group_array = api.get_groups()
    for i in range(0, len(group_array), 2):
        if i + 1 > len(group_array) - 1:
            inline_keyboard.row(
                InlineKeyboardButton(text=group_array[i], callback_data='group:' + group_array[i]))
        else:
            inline_keyboard.row(
                InlineKeyboardButton(text=group_array[i], callback_data='group:' + group_array[i]),
                InlineKeyboardButton(text=group_array[i + 1],
                                     callback_data='group:' + group_array[i + 1]))
    inline_keyboard.row(
        InlineKeyboardButton(text='–ù–µ –≤–∞–∂–ª–∏–≤–æ', callback_data='group:continue'),
        InlineKeyboardButton(text='–ó–±–µ—Ä–µ–≥—Ç–∏', callback_data='group:save'))
    if not edit_flag:
        bot.send_message(id_telegram, '–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø–∏ (—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–±–∏—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞)', reply_markup=inline_keyboard)
    else:
        bot.edit_message_text('–í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø–∏ (—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–±–∏—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞)', id_telegram, message_id)
        bot.edit_message_reply_markup(id_telegram, message_id, reply_markup=inline_keyboard)


@async_dec()
def filter_departments(id_telegram, message_id, edit_flag=False):
    inline_keyboard = InlineKeyboardMarkup()
    departments_map = api.get_departments()
    departments_array = []
    for k, v in departments_map.items():
        departments_array.append({
            'title': k,
            'id': v
        })
    for i in range(0, len(departments_array), 2):
        if i + 1 > len(departments_array) - 1:
            inline_keyboard.row(
                InlineKeyboardButton(
                    text=departments_array[i]['title'],
                    callback_data='dep:' + departments_array[i]['id']))
        else:
            inline_keyboard.row(
                InlineKeyboardButton(
                    text=departments_array[i]['title'],
                    callback_data='dep:' + departments_array[i]['id']),
                InlineKeyboardButton(
                    text=departments_array[i + 1]['title'],
                    callback_data='dep:' + departments_array[i + 1]['id']))
    inline_keyboard.row(
        InlineKeyboardButton(text='–ù–µ –≤–∞–∂–ª–∏–≤–æ', callback_data='dep:continue'),
        InlineKeyboardButton(text='–ó–±–µ—Ä–µ–≥—Ç–∏', callback_data='dep:save'))
    if not edit_flag:
        bot.send_message(id_telegram, '–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ñ–µ–¥—Ä–∏', reply_markup=inline_keyboard)
    else:
        bot.edit_message_text('–í–∏–±–µ—Ä—ñ—Ç—å –∫–∞—Ñ–µ–¥—Ä–∏', id_telegram, message_id)
        bot.edit_message_reply_markup(id_telegram, message_id, reply_markup=inline_keyboard)


@async_dec()
def filter_numbers_lessons(id_telegram, message_id, edit_flag=False):
    inline_keyboard = InlineKeyboardMarkup()
    inline_keyboard.row(
        InlineKeyboardButton(text='1 –ø–∞—Ä–∞', callback_data='number:1'),
        InlineKeyboardButton(text='2 –ø–∞—Ä–∞', callback_data='number:2'))
    inline_keyboard.row(
        InlineKeyboardButton(text='3 –ø–∞—Ä–∞', callback_data='number:3'),
        InlineKeyboardButton(text='4 –ø–∞—Ä–∞', callback_data='number:4'))
    inline_keyboard.row(
        InlineKeyboardButton(text='–ù–µ –≤–∞–∂–ª–∏–≤–æ', callback_data='number:continue'),
        InlineKeyboardButton(text='–ó–±–µ—Ä–µ–≥—Ç–∏', callback_data='number:save'))
    if not edit_flag:
        bot.send_message(id_telegram, '–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∏', reply_markup=inline_keyboard)
    else:
        bot.edit_message_text('–í–∏–±–µ—Ä—ñ—Ç—å –ø–∞—Ä–∏', id_telegram, message_id)
        bot.edit_message_reply_markup(id_telegram, message_id, reply_markup=inline_keyboard)


@async_dec()
def filter_types(id_telegram, message_id, edit_flag=False):
    inline_keyboard = InlineKeyboardMarkup()
    types = api.get_types()
    for i in range(0, len(types), 2):
        if i + 1 > len(types) - 1:
            inline_keyboard.row(
                InlineKeyboardButton(text=types[i]['typeTitle'],
                                     callback_data='type:' + types[i]['_id']))
        else:
            inline_keyboard.row(
                InlineKeyboardButton(text=types[i]['typeTitle'],
                                     callback_data='type:' + types[i]['_id']),
                InlineKeyboardButton(text=types[i + 1]['typeTitle'],
                                     callback_data='type:' + types[i + 1]['_id']))
    inline_keyboard.row(
        InlineKeyboardButton(text='–ù–µ –≤–∞–∂–ª–∏–≤–æ', callback_data='type:continue'),
        InlineKeyboardButton(text='–ó–±–µ—Ä–µ–≥—Ç–∏', callback_data='type:save'))
    if not edit_flag:
        bot.send_message(id_telegram, '–í–∏–±–µ—Ä—ñ—Ç—å –≤–∏–¥ –∑–∞–Ω—è—Ç—Ç—è (—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–±–∏—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞)',
                         reply_markup=inline_keyboard)
    else:
        bot.edit_message_text('–í–∏–±–µ—Ä—ñ—Ç—å –≤–∏–¥ –∑–∞–Ω—è—Ç—Ç—è (—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤–∏–±–∏—Ä–∞—Ç–∏ –¥–µ–∫—ñ–ª—å–∫–∞)', id_telegram, message_id)
        bot.edit_message_reply_markup(id_telegram, message_id, reply_markup=inline_keyboard)


@async_dec()
def search(id_telegram, message_id):
    bot.delete_message(id_telegram, message_id)
    user = api.get_user(id_telegram)
    array_req = api.post_search_params(user['departments'], user['groups'], user['types'], user['numberLessons'])
    text = ''
    if len(array_req) == 0:
        text = '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ‚ùóÔ∏è\n'
    else:
        text = '–ó–Ω–∞–π–¥–µ–Ω–æ‚ùóÔ∏è\n'
        for item in array_req:
            text = text + f'{item["numberLesson"]} –ø–∞—Ä–∞ - {item["group"]} –Ω–≥ - {item["type"]} - {item["audience"]}' \
                          f' ({item["departmentNumber"]}) - {item["teacher"]} ({item["title"]})\n'
    bot.send_message(id_telegram, str(text))


def filter_multi_select_return_array(inline_keyboard):
    len_inline_keyboard = len(inline_keyboard)
    selected = []
    for i in range(len_inline_keyboard - 1):
        len_row = len(inline_keyboard[i])
        for j_row in range(len_row):
            if str(inline_keyboard[i][j_row].text).startswith('‚úÖ '):
                selected.append(inline_keyboard[i][j_row].callback_data.split(':')[1])
    return selected


def filter_multi_select(reply_markup, value):
    keyboard = reply_markup.keyboard
    len_keyboard = len(keyboard)
    if not value == 'save' and not value == 'continue':
        for i in range(len_keyboard - 1):
            len_row = len(keyboard[i])
            for j_row in range(len_row):
                if str(keyboard[i][j_row].callback_data).split(':')[1] == value:
                    if not str(keyboard[i][j_row].text).startswith('‚úÖ '):
                        keyboard[i][j_row].text = '‚úÖ ' + keyboard[i][j_row].text
                    else:
                        keyboard[i][j_row].text = keyboard[i][j_row].text[2:]
        reply_markup.keyboard = keyboard
        return reply_markup


@bot.message_handler(content_types=['text'], func=lambda message: True)
def send_text(message):
    telegram_id = message.chat.id
    message_text = message.text
    user = api.get_user(telegram_id)
    if not user['userStatus']:
        if token_access.__contains__(message_text):
            api.update_field_for_user(telegram_id, True, 'userStatus')
            bot.send_message(telegram_id,
                             '–¢–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø—É –ø—Ä–∏–π–Ω—è—Ç–∏–π, —Ç–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±–æ—Ç—Éüîë'
                             '–ú–∏ –ø—ñ–¥–≥–æ—Ç—É–≤–∞–ª–∏ —Å—Ç–∞—Ç—Ç—é, —è–∫–∞ –æ–∑–Ω–∞–π–æ–º–∏—Ç—å –í–∞—Å –∑ –æ—Å–Ω–æ–≤–Ω–∏–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º —Ç–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º–∏ —Ä–æ–±–æ—Ç–∏ '
                             '–±–æ—Ç—É https://telegra.ph/Vas-v%D1%96taye-Telegram-bot---eSchelduleMITIT-10-29')
            filter_group(telegram_id, True)


print('Listening....')
count_restarts = 0
while True:
    try:
        bot.polling(none_stop=True)
    except:
        count_restarts = count_restarts + 1
        print(f'count_restarts = {count_restarts}')
        # logging.error(sys.exc_info()[0])
        # time.sleep(TIME_SLEEP)
